// Emoji Picker Container
var emojiPickerContainer = document.createElement('div');
emojiPickerContainer.id = 'emoji-picker-container';
emojiPickerContainer.style.display = 'none';
emojiPickerContainer.style.position = 'absolute';
emojiPickerContainer.style.background = '#fff';
emojiPickerContainer.style.border = '1px solid #ccc';
emojiPickerContainer.style.padding = '5px';
emojiPickerContainer.style.whiteSpace = 'nowrap'; // Ensure emojis are in a single line
document.body.appendChild(emojiPickerContainer);

var emojiList = ['😂', '❤', '🙏', '🥰', '👍', '😡'];

// Focus border effect
function addFocusEffect(element) {
  element.style.outline = '2px solid yellow';
}

function removeFocusEffect(element) {
  element.style.outline = 'none';
}

// Emoji Picker Function
function createEmojiPicker(messageElement, messageKey) {
  emojiPickerContainer.innerHTML = ''; // Clear picker
  emojiList.forEach(function (emoji, index) {
    var emojiButton = document.createElement('button');
    emojiButton.textContent = emoji;
    emojiButton.style.border = 'none';
    emojiButton.style.fontSize = '20px';
    emojiButton.style.padding = '5px';
    emojiButton.style.margin = '2px';
    emojiButton.style.cursor = 'pointer';

    // Focus effect for emoji button
    emojiButton.addEventListener('focus', function () {
      addFocusEffect(emojiButton);
    });

    emojiButton.addEventListener('blur', function () {
      removeFocusEffect(emojiButton);
    });

    emojiButton.onclick = function () {
      addEmojiReaction(messageKey, emoji);
      emojiPickerContainer.style.display = 'none'; // Hide picker
    };

    emojiPickerContainer.appendChild(emojiButton);
  });

  // Position picker
  var rect = messageElement.getBoundingClientRect();
  emojiPickerContainer.style.left = rect.left + 'px';
  emojiPickerContainer.style.top = rect.bottom + window.scrollY + 'px';
  emojiPickerContainer.style.display = 'block';
}

// Add Emoji Reaction
function addEmojiReaction(messageKey, emoji) {
  var roomRef = database.ref('chats/' + currentRoom + '/' + messageKey + '/reactions');
  roomRef.transaction(function (reactions) {
    reactions = reactions || {};
    reactions[userName] = emoji;
    return reactions;
  });
}

// Display Message
function displayMessage(message, messageKey) {
  const messageElement = document.createElement('p');
  messageElement.tabIndex = 0; // Make message focusable for keyboard navigation

  // User name
  const nameSpan = document.createElement('span');
  nameSpan.textContent = `${message.userName || 'Anonymous'}: `;
  nameSpan.style.fontWeight = 'bold';
  messageElement.appendChild(nameSpan);

  // Message text or image
  if (message.text) {
    const textNode = document.createTextNode(message.text);
    messageElement.appendChild(textNode);
  } else if (message.imageURL) {
    const imageElement = document.createElement('img');
    imageElement.src = message.imageURL;
    imageElement.style.maxWidth = '100px'; // Adjust image size as needed
    imageElement.style.marginTop = '5px';
    messageElement.appendChild(imageElement);
  }

  // Add reactions container
  const reactionsElement = document.createElement('div');
  reactionsElement.style.marginTop = '5px';
  messageElement.appendChild(reactionsElement);

  // Update reactions in real time
  database
    .ref(`chats/${currentRoom}/${messageKey}/reactions`)
    .on('value', (snapshot) => {
      const reactions = snapshot.val() || {};
      reactionsElement.textContent = ''; // Clear previous reactions

      for (const user in reactions) {
        const reactionSpan = document.createElement('span');
        reactionSpan.textContent = `${reactions[user]} (${user}) `;
        reactionSpan.style.marginRight = '5px';
        reactionsElement.appendChild(reactionSpan);
      }
    });

  // Show emoji picker on click or "Enter"
  messageElement.addEventListener('click', () => {
    createEmojiPicker(messageElement, messageKey);
  });

  messageElement.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
      createEmojiPicker(messageElement, messageKey);
      e.preventDefault();
    }
  });

  // Add focus/blur styles for accessibility
  messageElement.addEventListener('focus', () => {
    messageElement.style.outline = '2px solid yellow';
  });
  messageElement.addEventListener('blur', () => {
    messageElement.style.outline = 'none';
  });

  // Append the message to the chat box
  const chatBox = document.getElementById('chat-box');
  chatBox.appendChild(messageElement);

  // Scroll to the bottom of the chat box
  scrollToBottom();
}

// Scroll Chat to Bottom
function scrollToBottom() {
  const chatBox = document.getElementById('chat-box');
  chatBox.scrollTop = chatBox.scrollHeight;
}

// Load Messages
function loadMessages() {
  const roomRef = database.ref('chats/' + currentRoom).limitToLast(10);
  roomRef.on('child_added', (snapshot) => {
    const messageKey = snapshot.key;
    const message = snapshot.val();
    displayMessage(message, messageKey);
  });
}

// Initialize Chat
function initChat() {
  loadMessages();
}

// Start Chat
initChat();
